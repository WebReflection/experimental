{"name":"Experimental","tagline":"cross platform way to retrieve experimental features","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"experimental\r\n============\r\n\r\ncross platform way to retrieve experimental features\r\n\r\n\r\n### API\r\n\r\nIt's quite straight forward:\r\n\r\n```javascript\r\nexperimental(\r\n  object:Object,    // generic Object to check\r\n  property:string   // generic property to check\r\n  [,\r\n    assign:boolean  // optional flag to set the value\r\n  ]\r\n):string            // the found property or undefined\r\n```\r\n\r\nThe function returns the found string, if any, or undefined.\r\n\r\n#### The Difference Using The Third Argument\r\nBy default, if we check `experimental(window, \"requestAnimationFrame\")` nothing will happen to the window object and, as example in Webkit browsers, the `\"webkitRequestAnimationFrame\"` string will be returned.\r\n\r\nIf we use the third argument, not only that string is returned, but the property is attached with the desired name if not already attached before (avoids pointless getters/setters).\r\n\r\n```javascript\r\n// check if present and use it\r\nif (experimental(window, \"requestAnimationFrame\", true)) {\r\n  // in this case attached directly to the global\r\n  // so we can just use it all over\r\n  requestAnimationFrame(callback);\r\n} else {\r\n  setTimeout(callback, 10);\r\n}\r\n```\r\n\r\nWithout the third argument if there's nothing to attach since we are not looking for a method. An example could be some CSS property or an event type.\r\n\r\n```javascript\r\nthis.onload = function () {\r\n  //* add just a slash before this line ..\r\n  var body = document.body,\r\n      TRANSITION = experimental(body.style, \"transition\"),\r\n      TRANSITION_END = experimental(window, \"transitionEnd\");\r\n      // please note it's camelCase, most likely\r\n      // will be webkitTransitionEnd\r\n\r\n\r\n  if (TRANSITION) {\r\n    // property found, this could be\r\n    // mozTransition or webkitTransition, etc\r\n    body.style[TRANSITION] = \"background-color 1s ease-out\";\r\n  }\r\n  \r\n  // we can set this regardless\r\n  // in the worst case scenario it will never be fired\r\n  // however, Firefox does not behave properly\r\n  // so \"transitionend\" exists but it's hard to tell\r\n  body.addEventListener(\r\n    TRANSITION_END || // webkit wants camelCase, so does opera\r\n    \"transitionend\"\r\n    ,\r\n    function (e) {\r\n      alert(e.type);\r\n    },\r\n    false\r\n  );\r\n\r\n  // later on ...\r\n  setTimeout(function () {\r\n    body.style.backgroundColor = \"blue\";\r\n  }, 1000);\r\n}\r\n```\r\n\r\n\r\n### Some Generic Example\r\n\r\n```javascript\r\nalert([\r\n  // new stuff, if present\r\n  experimental(window, \"indexedDB\"),\r\n  experimental(window, \"URL\"),\r\n  experimental(window, \"performance\"),\r\n  experimental(window, \"performance\") &&\r\n  experimental(\r\n    window[\r\n      experimental(window, \"performance\")\r\n    ],\r\n    \"timing\"\r\n  ),\r\n  // direct method\r\n  experimental(window, \"requestAnimationFrame\", true),\r\n  experimental(document, \"readyStateChange\"),\r\n  experimental(window, \"transitionEnd\"),\r\n  experimental(document.documentElement.style, \"transition\")\r\n].join(\"\\n\"));\r\n```\r\n\r\n\r\n### node.js\r\n\r\n    npm install experimental -g\r\n\r\nThen in any JS file ...\r\n\r\n```javascript\r\nvar experimental = require('experimental').experimental;\r\n```\r\n\r\nThat's pretty much it.","google":""}